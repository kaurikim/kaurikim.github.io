<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">

  <title><![CDATA[Category: Tools | Kauri Blog]]></title>
  <link href="http://kaurikim.github.io/blog/categories/tools/atom.xml" rel="self"/>
  <link href="http://kaurikim.github.io/"/>
  <updated>2014-02-16T05:12:01+09:00</updated>
  <id>http://kaurikim.github.io/</id>
  <author>
    <name><![CDATA[Kim Sung-Jo]]></name>
    
  </author>
  <generator uri="http://octopress.org/">Octopress</generator>

  
  <entry>
    <title type="html"><![CDATA[QEMU MONITOR 사용하여 Guest OS 상태 확인]]></title>
    <link href="http://kaurikim.github.io/blog/2014/02/11/qemu-monitor-debug/"/>
    <updated>2014-02-11T14:22:15+09:00</updated>
    <id>http://kaurikim.github.io/blog/2014/02/11/qemu-monitor-debug</id>
    <content type="html"><![CDATA[<p>guest os 에 접근할 수 없는 경우, 아래와 같이 QEMU MONITOR 기능을 사용하여 guest os 의 디버그 정보를 획득한다.  (qemu/monitor 명령어 참고: <a href="http://en.wikibooks.org/wiki/QEMU/Monitor">http://en.wikibooks.org/wiki/QEMU/Monitor</a>)</p>

<ul>
<li>cpu register 정보

<ul>
<li><code>virsh qemu-monitor-command --hmp &lt;GUEST NAME&gt; info registers</code></li>
</ul>
</li>
<li>sysrq 를 사용하여 커널의 상태 정보 획득

<ul>
<li>sysrq 참고: <a href="https://www.kernel.org/doc/Documentation/sysrq.txt">https://www.kernel.org/doc/Documentation/sysrq.txt</a></li>
<li><code>virsh console &lt;vm name&gt;</code> 명령어를 사용하여 console 에 연결</li>
<li><code>virsh qemu-monitor-command --hmp &lt;vm name&gt;  sendkey alt-sysrq-7</code>
명령어를 사용하여 커널의 로그 레벨을 debug 레벨로 변경</li>
<li><code>virsh qemu-monitor-command --hmp v1 sendkey alt-sysrq-t1</code>
명령어를 사용하여 process 의 정보를 확인</li>
</ul>
</li>
<li>커널 로그 확인

<ul>
<li>참고: <a href="http://wiki.qemu.org/download/qemu-doc.html#pcsys_005fmonitor">http://wiki.qemu.org/download/qemu-doc.html#pcsys_005fmonitor</a></li>
<li>리눅스 커널의 __log_buf 주소를 System.map 또는
<code>cat /proc/kallsysms | grep __log_buf</code> 명령어를 사용하여 확인</li>
<li><code>virsh qemu-monitor-command --hmp v2  'x/65000hc 0xffffff818d8ca0' &gt; hex.dump</code>
명령어를 사용하여 __log_buf 의 내용 저장</li>
<li>아래 코드를 사용하여 덤프된 데이터를 가독성 있는 포맷으로 변환</li>
</ul>
</li>
</ul>


<p>```python</p>

<h1>!/usr/bin/env python</h1>

<p>import os
import sys
import string</p>

<p>def print_klog(fname):</p>

<pre><code>space_cnt = 0
buf = ""
with open(fname, 'r') as f:
    while True:
        line = f.readline()
        if not line:
            break
        if len(line) &lt; 2:
            continue
        tlist = line.split(': ')[1:]
        rlist =  tlist[0].split("'")
        for item in rlist:
            if item == ' ':
                if space_cnt == 0:
                    space_cnt += 1
                    continue;
            else:
                space_cnt = 0

            if item is "":
                continue
            if item == "\n":
                continue
            if item == "\r\n":
                continue
            if item == "\\n":
                print buf
                buf = ''
                continue
            buf += item
</code></pre>

<p>def main(opts):</p>

<pre><code>if len(opts) &lt; 2:
    print 'usage: %s hexdump_file' % opts[0]
    return

print_klog(opts[1])

return
</code></pre>

<p>if <strong>name</strong> == &lsquo;<strong>main</strong>&rsquo;:</p>

<pre><code>opts = sys.argv
main(opts)
</code></pre>

<p>```</p>
]]></content>
  </entry>
  
  <entry>
    <title type="html"><![CDATA[Octopress 를 사용하여 GitHub Pages 에 Blog 만들기]]></title>
    <link href="http://kaurikim.github.io/blog/2014/02/11/octopress-github-blog/"/>
    <updated>2014-02-11T00:47:13+09:00</updated>
    <id>http://kaurikim.github.io/blog/2014/02/11/octopress-github-blog</id>
    <content type="html"><![CDATA[<h1>quick install guide</h1>

<ol>
<li>github pages 생성

<ul>
<li><a href="http://pages.github.com/">http://pages.github.com/</a></li>
</ul>
</li>
<li>개인 pc 에 octopress 설치

<ul>
<li><a href="http://octopress.org/docs/setup/">http://octopress.org/docs/setup/</a></li>
</ul>
</li>
<li>octopress 설정

<ul>
<li><a href="http://octopress.org/docs/configuring/">http://octopress.org/docs/configuring/</a></li>
<li>test post page 만들기</li>
<li>rake new_post[&ldquo;post title&rdquo;]</li>
<li><a href="http://octopress.org/docs/blogging/">http://octopress.org/docs/blogging/</a></li>
</ul>
</li>
<li>생성된 post 파일에 내용 작성

<ul>
<li>vi source/_posts/2014-02-10-octopress-github-blog.markdown</li>
</ul>
</li>
<li>markdown –> html 으로 변환

<ul>
<li>rake generate</li>
<li>markdown 문법 아래 참고

<ul>
<li><a href="http://ko.wikipedia.org/wiki/%EB%A7%88%ED%81%AC%EB%8B%A4%EC%9A%B4">http://ko.wikipedia.org/wiki/%EB%A7%88%ED%81%AC%EB%8B%A4%EC%9A%B4</a></li>
<li><a href="http://daringfireball.net/projects/markdown/syntax">http://daringfireball.net/projects/markdown/syntax</a></li>
<li><a href="https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet">https://github.com/adam-p/markdown-here/wiki/Markdown-Cheatsheet</a></li>
</ul>
</li>
</ul>
</li>
<li>생성된 blog 와 post page 웹에서 점점

<ul>
<li>rake preivew</li>
<li>localhost:4000 으로 접속</li>
</ul>
</li>
<li>생성된 blog 와 post 를 github pages 에 등록

<ul>
<li>rake setup_github_pages</li>
<li>rake deploy</li>
<li><a href="http://octopress.org/docs/deploying/github/">http://octopress.org/docs/deploying/github/</a> 참고</li>
</ul>
</li>
<li>github pages url 로 접속하여 개시된 blog 확인

<ul>
<li><a href="http://kaurikim.github.io">http://kaurikim.github.io</a></li>
</ul>
</li>
</ol>

]]></content>
  </entry>
  
</feed>
